{"version":3,"sources":["../node_modules/scania-webcomponents/dist/esm/dropdown-menu.entry.js"],"names":["MyMenu","hostRef","registerInstance","this","openChanged","createEvent","items","open","event","detail","emit","name","oldValue","newValue","console","log","el","shadowRoot","addEventListener","Array","from","querySelectorAll","forEach","item","i","slot","onclick","h","Host","onOpenChanged","handleToggle","title","viewBox","points","onClick","map","_","getElement","style"],"mappings":"mOAIMA,EAAM,WACV,WAAYC,GAAS,oBACnBC,YAAiBC,KAAMF,GACvBE,KAAKC,YAAcC,YAAYF,KAAM,cAAe,GACpDA,KAAKG,MAAQ,GACbH,KAAKI,MAAO,EALJ,gDAOV,SAAaC,GACXL,KAAKI,KAAOC,EAAMC,OAAOF,OARjB,gCAUV,SAAmBA,GACjBJ,KAAKC,YAAYM,KAAK,CAAEH,WAXhB,sCAgBV,SAAyBI,EAAMC,EAAUC,GACvCC,QAAQC,IAAR,UAAeJ,EAAf,0CAAqDC,EAArD,eAAoEC,MAjB5D,+BAmBV,WAAoB,WAClBV,KAAKa,GAAGC,WAAWC,iBAAiB,cAAc,WAChD,EAAKZ,MAAQa,MAAMC,KAAK,EAAKJ,GAAGK,iBAAiB,uBACjD,EAAKf,MAAMgB,SAAQ,SAACC,EAAMC,GACxBD,EAAKE,KAAL,eAAoBD,GACpBD,EAAKG,QAAU,kBAAMZ,QAAQC,IAAI,UAAW,EAAKR,eAxB7C,oBA4BV,WAAS,WACP,OAAQoB,YAAEC,IAAM,KAAMD,YAAE,OAAQ,MAAOA,YAAE,kBAAmB,CAAEE,cAAe,SAAArB,GAAK,OAAI,EAAKsB,aAAatB,KAAUmB,YAAE,OAAQ,CAAEF,KAAM,YAAad,KAAM,SAAWR,KAAK4B,MAAOJ,YAAE,MAAO,CAAEK,QAAS,aAAc,aAAc7B,KAAKI,KAAO,WAAa,aAAeoB,YAAE,UAAW,CAAEM,OAAQ9B,KAAKI,KAAO,yBAA2B,0BAA4BoB,YAAE,OAAQ,CAAEO,QAAS,kBAAO,EAAK3B,MAAQ,EAAKA,OAASJ,KAAKG,MAAM6B,KAAI,SAACC,EAAGZ,GAAJ,OAAWG,YAAE,KAAM,KAAMA,YAAE,OAAQ,CAAEhB,KAAM,QAAF,OAAUa,cA7Bjd,cA+BV,WAAW,OAAOa,YAAWlC,SA/BnB,+BAaV,WACE,MAAO,CAAC,WAdA,oBAgCV,WAAwB,MAAO,CAC7B,KAAQ,CAAC,2BAjCD,KAoCZH,EAAOsC,MAtCiB","file":"static/js/9.f435023d.chunk.js","sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-6737dd6f.js';\n\nconst dropdownMenuCss = \":host{display:block}menu{list-style:none;padding:0;margin:0;}slot[name=\\\"label\\\"]{align-items:center;display:flex}slot[name=\\\"label\\\"] svg{fill:currentcolor;block-size:1em;inline-size:0.666em;margin-inline-start:1ex}\";\n\nconst MyMenu = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.openChanged = createEvent(this, \"openChanged\", 7);\n    this.items = [];\n    this.open = false;\n  }\n  handleToggle(event) {\n    this.open = event.detail.open;\n  }\n  openChangedHandler(open) {\n    this.openChanged.emit({ open });\n  }\n  static get observedAttributes() {\n    return ['title'];\n  }\n  attributeChangedCallback(name, oldValue, newValue) {\n    console.log(`${name}'s value has been changed from ${oldValue} to ${newValue}`);\n  }\n  componentWillLoad() {\n    this.el.shadowRoot.addEventListener('slotchange', () => {\n      this.items = Array.from(this.el.querySelectorAll('dropdown-menu-item'));\n      this.items.forEach((item, i) => {\n        item.slot = `item-${i}`;\n        item.onclick = () => console.log('Clicked', this.open);\n      });\n    });\n  }\n  render() {\n    return (h(Host, null, h(\"slot\", null), h(\"dropdown-dialog\", { onOpenChanged: event => this.handleToggle(event) }, h(\"slot\", { slot: \"activator\", name: \"label\" }, this.title, h(\"svg\", { viewBox: \"0 0 100 66\", \"aria-label\": this.open ? 'Expanded' : 'Collapsed' }, h(\"polygon\", { points: this.open ? '0 66.6, 100 66.6, 50 0' : '0 0, 100 0, 50 66.6' }))), h(\"menu\", { onClick: () => (this.open = !this.open) }, this.items.map((_, i) => (h(\"li\", null, h(\"slot\", { name: `item-${i}` }))))))));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"open\": [\"openChangedHandler\"]\n  }; }\n};\nMyMenu.style = dropdownMenuCss;\n\nexport { MyMenu as dropdown_menu };\n"],"sourceRoot":""}